import CustomElementInternals from"../../CustomElementInternals.js";import*as Utilities from"../../Utilities.js";let ChildNodeNativeMethods;export default function(e,t,i){function n(t){return function(...i){const n=[],o=[];for(var s=0;s<i.length;s++){const e=i[s];if(e instanceof Element&&Utilities.isConnected(e)&&o.push(e),e instanceof DocumentFragment)for(let t=e.firstChild;t;t=t.nextSibling)n.push(t);else n.push(e)}t.apply(this,i);for(let t=0;t<o.length;t++)e.disconnectTree(o[t]);if(Utilities.isConnected(this))for(let t=0;t<n.length;t++){const i=n[t];i instanceof Element&&e.connectTree(i)}}}void 0!==i.before&&Utilities.setPropertyUnchecked(t,"before",n(i.before)),void 0!==i.before&&Utilities.setPropertyUnchecked(t,"after",n(i.after)),void 0!==i.replaceWith&&Utilities.setPropertyUnchecked(t,"replaceWith",function(...t){const n=[],o=[];for(var s=0;s<t.length;s++){const e=t[s];if(e instanceof Element&&Utilities.isConnected(e)&&o.push(e),e instanceof DocumentFragment)for(let t=e.firstChild;t;t=t.nextSibling)n.push(t);else n.push(e)}const c=Utilities.isConnected(this);i.replaceWith.apply(this,t);for(let t=0;t<o.length;t++)e.disconnectTree(o[t]);if(c){e.disconnectTree(this);for(let t=0;t<n.length;t++){const i=n[t];i instanceof Element&&e.connectTree(i)}}}),void 0!==i.remove&&Utilities.setPropertyUnchecked(t,"remove",function(){const t=Utilities.isConnected(this);i.remove.call(this),t&&e.disconnectTree(this)})};