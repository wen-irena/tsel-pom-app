import msfnz from"../common/msfnz";import adjust_lon from"../common/adjust_lon";import tsfnz from"../common/tsfnz";import phi2z from"../common/phi2z";import{FORTPI,R2D,EPSLN,HALF_PI}from"../constants/values";export function init(){var t=this.b/this.a;this.es=1-t*t,"x0"in this||(this.x0=0),"y0"in this||(this.y0=0),this.e=Math.sqrt(this.es),this.lat_ts?this.sphere?this.k0=Math.cos(this.lat_ts):this.k0=msfnz(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts)):this.k0||(this.k?this.k0=this.k:this.k0=1)};export function forward(t){var s,i,h=t.x,a=t.y;if(a*R2D>90&&a*R2D<-90&&h*R2D>180&&h*R2D<-180)return null;if(Math.abs(Math.abs(a)-HALF_PI)<=EPSLN)return null;if(this.sphere)s=this.x0+this.a*this.k0*adjust_lon(h-this.long0),i=this.y0+this.a*this.k0*Math.log(Math.tan(FORTPI+.5*a));else{var r=Math.sin(a),n=tsfnz(this.e,a,r);s=this.x0+this.a*this.k0*adjust_lon(h-this.long0),i=this.y0-this.a*this.k0*Math.log(n)}return t.x=s,t.y=i,t};export function inverse(t){var s,i,h=t.x-this.x0,a=t.y-this.y0;if(this.sphere)i=HALF_PI-2*Math.atan(Math.exp(-a/(this.a*this.k0)));else{var r=Math.exp(-a/(this.a*this.k0));if(-9999===(i=phi2z(this.e,r)))return null}return s=adjust_lon(this.long0+h/(this.a*this.k0)),t.x=s,t.y=i,t};export var names=["Mercator","Popular Visualisation Pseudo Mercator","Mercator_1SP","Mercator_Auxiliary_Sphere","merc"];export default{init:init,forward:forward,inverse:inverse,names:names};