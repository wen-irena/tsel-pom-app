import{heightAtLine}from"../line/spans.js";import{getLine,lineAtHeight,updateLineHeight}from"../line/utils_line.js";import{paddingTop,textHeight}from"../measurement/position_measurement.js";import{ie,ie_version}from"../util/browser.js";export function updateHeightsInViewport(e){let t=e.display,i=t.lineDiv.offsetTop;for(let e=0;e<t.view.length;e++){let n,o=t.view[e];if(o.hidden)continue;if(ie&&ie_version<8){let e=o.node.offsetTop+o.node.offsetHeight;n=e-i,i=e}else{let e=o.node.getBoundingClientRect();n=e.bottom-e.top}let l=o.line.height-n;if(n<2&&(n=textHeight(t)),(l>.005||l<-.005)&&(updateLineHeight(o.line,n),updateWidgetHeight(o.line),o.rest))for(let e=0;e<o.rest.length;e++)updateWidgetHeight(o.rest[e])}};function updateWidgetHeight(e){if(e.widgets)for(let t=0;t<e.widgets.length;++t){let i=e.widgets[t],n=i.node.parentNode;n&&(i.height=n.offsetHeight)}}export function visibleLines(e,t,i){let n=i&&null!=i.top?Math.max(0,i.top):e.scroller.scrollTop;n=Math.floor(n-paddingTop(e));let o=i&&null!=i.bottom?i.bottom:n+e.wrapper.clientHeight,l=lineAtHeight(t,n),r=lineAtHeight(t,o);if(i&&i.ensure){let n=i.ensure.from.line,o=i.ensure.to.line;n<l?(l=n,r=lineAtHeight(t,heightAtLine(getLine(t,n))+e.wrapper.clientHeight)):Math.min(o,t.lastLine())>=r&&(l=lineAtHeight(t,heightAtLine(getLine(t,o))-e.wrapper.clientHeight),r=o)}return{from:l,to:Math.max(r,l+1)}};